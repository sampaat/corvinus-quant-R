Lesson 4: R Data loading, plots
========================================================
author: Mate Csaba Sandor
date: 2018 September
autosize: true


Reminder about regular expressions
========================================================

- Here is a handy app for [learning regexp in general](https://regexone.com/)
- For R specifics you should check this [cheatsheet](https://www.rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf)

Data? So basic..
========================================================

- In a firm we usually have a database where we can perform SQL queries
- Now we do not have access to such thins unfortunately
- BUT! Nevertheless, you should learn how to write simple SQL queries 
- [This](https://www.codecademy.com/learn/learn-sql) is a really good 2 hour course that gives you most of what you need to start
- To set up database connections in R you should use `odbc` or `jdbc` packages to set up the connection adn `DBI` to send queries. The responses then are a perfect feed for SQL.

Let's trade Bitcoin! Or not. Whatever.
========================================================

[Here](http://bitcoincharts.com) you can get some sweet exchange datasets, let's download some.
```{r}
library(readr)
read_csv("http://api.bitcoincharts.com/v1/csv/anxhkUSD.csv.gz") 
```
Hmm. Interesting.

Figuring out the dataset, make it tidy
========================================================

```{r}
library(magrittr)
readr::read_csv("http://api.bitcoincharts.com/v1/csv/anxhkUSD.csv.gz", col_names = c("date", "volume", "price")) %>%
  dplyr::mutate(date = as.POSIXct(date, origin="1970-01-01"))
```
And so on...

Questions:
- Which was the most active month?
- What is the bottom 5th percentile of the price returns? (function to use: `lag`)

Exercise time!
========================================================

Yahoo Finance is ususally my first go-to if I need some stock or ETF data.
https://finance.yahoo.com/quote/%5EGSPC/history?p=%5EGSPC

- Download S&P500 full history
- Donwload Dow Jones full history
- Join the second to the first while holding on to all records (see `left_join`, `inner_join` and friends)

We can do excels as well!
========================================================
Download excel file from [here](http://www.cboe.com/micro/buywrite/monthendpricehistory.xls) or jus google "cboe excel download"
```{r}
readxl::read_excel("monthendpricehistory.xls")
```

Make it nicer...
========================================================
Download excel file from [here](http://www.cboe.com/micro/buywrite/monthendpricehistory.xls) or jus google "cboe excel download"
```{r}
readxl::read_excel("monthendpricehistory.xls", skip = 4, col_types = c("date",rep("numeric",14))) %>%
  dplyr::rename(date = "X__1", CLL = `CLL*`, VIX = "VIX\u00ae")
```

Plotting! The base plots
========================================================

The basic plot function is the most convinient way.
```{r}
plot(iris)
```

Base plot - with linear models
========================================================

```{r}
a <- lm(formula = "Sepal.Length ~ Petal.Length", data = iris)
plot(iris$Petal.Length, iris$Sepal.Length)
abline(lm(formula = "Sepal.Length ~ Petal.Length", data = iris))
abline(h = 6)
abline(v = 4)
```

Base plot - density plots
========================================================

```{r}
hist(iris$Sepal.Length, xlab = "Sepal length", main = "Boring...", col = "pink")
```

Base plot - density plots
========================================================

```{r}
library(magrittr)
iris$Sepal.Length %>% density() %>% plot(main = "A bit better.", lwd = 4)
iris$Sepal.Length %>% quantile() %>% abline(v = ., col = "red", lwd = 2)
iris$Sepal.Length %>% median() %>% abline(v = ., col = "green", lwd = 8)
```

ggplot for the win!
========================================================

```{r}
library(ggplot2)
data("midwest", package = "ggplot2")

gg <- ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + 
  xlim(c(0, 0.1)) + 
  ylim(c(0, 500000)) + 
  labs(subtitle="Area Vs Population", 
       y="Population", 
       x="Area", 
       title="Scatterplot", 
       caption = "Source: midwest")

plot(gg)
```

ggplot for the win!
========================================================

```{r, echo=FALSE}
library(ggplot2)
data("midwest", package = "ggplot2")

gg <- ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + 
  xlim(c(0, 0.1)) + 
  ylim(c(0, 500000)) + 
  labs(subtitle="Area Vs Population", 
       y="Population", 
       x="Area", 
       title="Scatterplot", 
       caption = "Source: midwest")

plot(gg)
```

zoo and dygraphs
========================================================

```{r}
readxl::read_excel("monthendpricehistory.xls", skip = 4, col_types = c("date",rep("numeric",14))) %>% tidyr::drop_na() %>%
  dplyr::rename(date = "X__1", CLL = `CLL*`, VIX = "VIX\u00ae") %>%
  {zoo::zoo(dplyr::select(., -date), dplyr::pull(., date))} %>%
  dygraphs::dygraph(main = "Rolling-window values") %>%
  dygraphs::dyRangeSelector() %>%
  dygraphs::dyHighlight(highlightSeriesOpts = list(strokeWidth = 3)) %>%
  dygraphs::dyLegend(show = "always", hideOnMouseOut = FALSE,width = 370) %>%
  dygraphs::dyAxis("y", label = "Index return", axisLabelFontSize=15,labelWidth=20, axisLabelWidth=90) %>%
  dygraphs::dyLegend(labelsDiv="rollcor_legend", labelsSeparateLines= TRUE)
```

Materials, other plot packages
========================================================

- [This is one of the most comprehensive example list for ggplot2](http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html)
- [Dygraphs for R](https://rstudio.github.io/dygraphs/)
- [Lattice is a simple grid-plot package for R](https://www.statmethods.net/advgraphs/trellis.html)
- [Plotly is an interactive plot package forked to R, it can be combined with ggplot](https://plot.ly/r/)


And there are many more

Exercise time!
========================================================

- Create a ggplot timeseries from S&P500 and DOW, make sure you make the labels meaningful, the plot colorful and include a legend!
- Create the correlation matrix of the index values in the CBOE dataset (see package `lattice`, use the `viridis` palette)
- Download all datasets for `ripple` market in the bitcoincharts datasource, clreate a stacket barplot showing the market share for the 3 currencies in 3 consecutive years

Group project!
========================================================

- Form 3 groups 
- Elect a project manager
- You will be assigned a project from the following slides
- You should present the results and the code in 3 weeks from now.
- The presentation should be in Rmarkdown (to be discussed next week), featuring R generated plots.
- You should work collaboratively on the code, everybody has to have some added value. (E.g. the project manager assigns tasks and reveiws the code, somebody does the research and writes the reveiw, others code separate functions, another deals with the data)

A. Optimal portfolio of 5 stocks
========================================================

- Select 5 US stocks from separate indicies
- Examine the covariance structure of daily total returns (without dividends)
- Calculate the optimal minimum-variance portfolio on a historical sample and observe the out-of-sample performance (at least 5 years)
- Compare the statistics of the returns of the portfolio and it's constituents in the out-of-sample period
- See package `PerformanceAnalytics` or just figure out the algebra (it's not that hard)


B. ETF replication
========================================================

- Select 5 US stocks from and index and an ETF that follows that index
- Examine the covariance structure of daily total returns (without dividends)
- Replicate the ETF returns using the 5 stocks using constrained linear regression (there can be on intercept, betas should sum to 1)
- Compare the statistics of the returns of the ETF and its replica on an out-of-sample period
- See package `restriktor`


C. Option pricing
========================================================

- Select 5 US stocks from separate indicies
- Create a function that generates price paths for the future based on past performance, use GARCH(1,1) with gaussian prior and resampling
- Create a functions that calcluates put and call option prices using Black-Sholes formula on the historical data and one that does it using the simulations
- Compare option prices you have ended up with using the 3 models
- See package `ugarch`
