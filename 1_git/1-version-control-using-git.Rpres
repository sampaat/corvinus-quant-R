Lesson 1: Version control using git
========================================================
author: Mate Csaba Sandor
date: 2018 September
autosize: true

Version control: why?
========================================================

- When you create documents and codes, usually you do not get to produce a perfect version that you soes not need any further modification
- The creative process includes a lot of trial and error, making mistakes, revising your work now and then
- Sometimes you add parts that you did not wanted to or delete some that you wanted to keep
- You would like to keep backup of your material, preferably in many place

**How could I make sure I keep the whole evolution of my document in sync on multiple locations?**

Version control: sharing is caring
========================================================

- It would be nice to share my codes and its history with others
- It would be nice to let others to suggest modifications

**How can I do this without sending around emails of zip files and sharing dropbox libraries?**

Git
========================================================

*Git* is a version control system for tracking changes in computer files and coordinating work on those files among multiple people.

- Developed in 2005 by Linus Torvalds
- Free and open source software
- Market standard

Usual research workflow using git
========================================================

- **Pulling** codebase from remote directory
- **Editing** files
- Review/**add**/**commit** changes
- **Pushing** codebase to remote directory

Cooperation on common codebase
========================================================

- Pulling the **master** branch
- Creating a **feature** branch
- Edit/review/add/commit/push features
- **Merge** to master branch

Remote repositories
========================================================

- A place where you can backup your code
- A place where you can share your code and gather others from
- You can set up a git server yourself or use a commercial provider (*GitHub, GitLab, BitBucket, etc.*)
- For this class I have suggested to regirster on **GitHub** (public repos are free, you also get some private space)

Creating my first project
========================================================

- Create a new project in GitHub
- Do not forget to check the README file inclusion
- Go to your (git) terminal and clone the repository:

```
git clone SSH LINK FROM GITHUB
```
Pushing changes
========================================================

- Create a text file named ``` hello_world.txt  ```
- Write something into it
- ``` git add hello_world.txt ```
- ``` git commit -m "initiating my first file" ```
- ``` git push origin master ```
- Provide your credentials (advanced users can [set up an ssh key](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/))
- Check out the contents on GitHub

Reverting to an earlier version
========================================================

- Add a few "accidental" lines to your file
- Check ```git status```
- Add and commit to your changes
- Now check your commit history: ```git log```
- Revert the file: ```git checkout COMMITNO -- hello_world.txt```

I want to try something.. let's start a branch!
========================================================

- ```git checkout -b mybranch```
- ```git status``` -> now we are not on master
- Modify/add/commit file
- ```git checkout master``` -> this does not have the modifications
- ```git merge mybranch``` -> now it has them (*when the conflicts have been resolved...*)
- ```git log``` -> the merge is a separate commit


Large files
========================================================

- Git has been made for text files, so pictures/videos/archives will not be effectively handled by it, but sometimes it would still come in handy
- To resolve this, the community created [Git LFS](https://help.github.com/articles/configuring-git-large-file-storage/#platform-mac) or large file system
- LFS helps you so that you can version control your large files beside your code without slowing your process down. Version controlling large files in the standard way takes up huge space in memory and on disk and it is really calculation intensive.
- After installation you can specify extensions that will be handled by lfs from then on: ```git lfs track "*.jpg"````

I need help!
========================================================

- Read the manuals on [Git](https://git-scm.com/doc) and [GitHub](https://help.github.com/)
- Google and StackOverflow is always there to help you
- If there is no solution to your problem on the internet, you are either a pro or you have not searched just long enough. *(Hint:most probably you are not a pro)*

Task 1
========================================================

- Go up to github and search for my username: *sampaat*
- Find the project corvinus-quant-R
- Clone it to your device and pull it from time to time, to have the most updated version


Task 2
========================================================

- Create a user profile for yourself
- Initiate a project on your computer
- Create a helloWorld.R file with the content *"Hello World!"*
- Add and commit your changes
- Push the project as a public repository to github

Task 3 (advanced, only if the previous 2 was easy)
========================================================

- Create a new branch called *test*
- Modify *"Hello World!"* to *"Bye World!"*
- Add and commit, push
- Check out the master branch
- Modify *"Hello World!"* to *"Olleh World!"*
- Add and commit, push
- Merge test branch to master, resolve conflitcs as you seem fit. You can do this on your computer or on github as well.

Task 4 (advanced, only if the previous 3 finished)
========================================================

- Set up SSH key authentication
- Info [here](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh) but first try to google
- If you made it so far, you can download the github desktop app and forget about the terminal utnil you will need it in any remote working setup.